# Generated by Django 5.2.5 on 2025-08-17 00:48

from django.db import migrations
from django.db import connection

def remove_obsolete_columns(apps, schema_editor):
    """Remove obsolete columns from gestion_usuarios_rp table"""
    with connection.cursor() as cursor:
        # Check if columns exist before trying to drop them
        cursor.execute("PRAGMA table_info(gestion_usuarios_rp)")
        columns = [row[1] for row in cursor.fetchall()]
        
        # Drop obsolete columns if they exist
        obsolete_columns = ['fecha', 'numero', 'usuario_id']
        for column in obsolete_columns:
            if column in columns:
                try:
                    # SQLite doesn't support DROP COLUMN directly, so we need to recreate the table
                    print(f"Removing column {column}")
                    # We'll handle this by creating a new table without these columns
                    # and copying data over
                except Exception as e:
                    print(f"Error removing column {column}: {e}")
        
        # For SQLite, we need to recreate the table without the obsolete columns
        try:
            # Create new table with correct structure
            cursor.execute("""
                CREATE TABLE gestion_usuarios_rp_new (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    numero_rp VARCHAR(50),
                    numero_contrato VARCHAR(50),
                    tipo_contrato VARCHAR(100),
                    duracion VARCHAR(100),
                    fecha_inicio DATE,
                    fecha_final DATE,
                    objeto TEXT,
                    fecha_rp DATE,
                    fecha_suscripcion DATE,
                    valor DECIMAL(15, 2),
                    archivo varchar(100),
                    fecha_creacion datetime,
                    fecha_actualizacion datetime
                )
            """)
            
            # Copy data from old table to new table (only matching columns)
            cursor.execute("""
                INSERT INTO gestion_usuarios_rp_new 
                (id, numero_rp, numero_contrato, tipo_contrato, duracion, 
                 fecha_inicio, fecha_final, objeto, fecha_rp, fecha_suscripcion, 
                 valor, archivo, fecha_creacion, fecha_actualizacion)
                SELECT id, numero_rp, numero_contrato, tipo_contrato, duracion,
                       fecha_inicio, fecha_final, objeto, fecha_rp, fecha_suscripcion,
                       valor, archivo, fecha_creacion, fecha_actualizacion
                FROM gestion_usuarios_rp
            """)
            
            # Drop old table and rename new table
            cursor.execute("DROP TABLE gestion_usuarios_rp")
            cursor.execute("ALTER TABLE gestion_usuarios_rp_new RENAME TO gestion_usuarios_rp")
            
            print("Successfully removed obsolete columns")
            
        except Exception as e:
            print(f"Error recreating table: {e}")

def reverse_remove_obsolete_columns(apps, schema_editor):
    """Reverse operation - does nothing as we can't restore deleted columns"""
    pass

class Migration(migrations.Migration):

    dependencies = [
        ('gestion_usuarios', '0005_auto_20250816_1940'),
    ]

    operations = [
        migrations.RunPython(remove_obsolete_columns, reverse_remove_obsolete_columns),
    ]
